{"version":3,"file":"static/js/556.6ed9cadd.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './deadpool.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <div>\r\n            <span style={{display: 'flex', justifyContent: 'center', marginTop: '5px', color:'#9F0013', fontWeight: 'bold', fontSize:'20px' }}>\r\n                Error</span>\r\n            <img style={{ display: 'block', width: '230px', height: '230px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss';\r\n\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n\r\n    const {loading, error, clearError, getCharacter, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId])\r\n\r\n\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n\r\n    const setContent = (process, char) => {\r\n        switch (process) {\r\n            case 'waiting':\r\n                return <Skeleton/>;\r\n                break;\r\n            case 'loading':\r\n                return <Spinner/>\r\n                break;\r\n            case 'confirmed':\r\n                return <View char={char}/>;\r\n                break;\r\n            case 'error':\r\n                return <ErrorMessage/>\r\n            default: \r\n                throw new Error('Unexpected process state');\r\n        }\r\n    }\r\n\r\n    // const skeleton = char || loading || error ? null : <Skeleton/>;\r\n    // const errorMessage = error ? <ErrorMessage/> : null;\r\n    // const spinner = loading ? <Spinner/> : null;\r\n    // const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {/* {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content} */}\r\n            {setContent(process, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a><a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                { \r\n                    comics.map((item, i) => {\r\n                        return(\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    }).slice(0, 10) \r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CharInfo;","import {useState, useEffect} from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\n\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000)\r\n\r\n        return () => {\r\n            clearInterval(timerId);\r\n        }\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n\r\n\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error) ? <View char={char}/> : null;\r\n\r\n        return (\r\n            <div className=\"randomchar\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n                <div className=\"randomchar__static\">\r\n                    <p className=\"randomchar__title\">\r\n                        Random character for today!<br/>\r\n                        Do you want to get to know him better?\r\n                    </p>\r\n                    <p className=\"randomchar__title\">\r\n                        Or choose another one\r\n                    </p>\r\n                    <button onClick={updateChar} className=\"button button__main\">\r\n                        <div className=\"inner\">try it</div>\r\n                    </button>\r\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const{name, description, thumbnail, homepage, wiki} = char;\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">{description}</p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './charList.scss';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {loading, error, getAllCharacters} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach( item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'contain'};\r\n            }\r\n\r\n            return (\r\n                <CSSTransition key={item.id} timeout={500} classNames='char__item'>\r\n                    <li className=\"char__item\" \r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i)}}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === 'Enter') {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i)\r\n                            }\r\n                        }}>\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className='char__grid'>\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n\r\n    }\r\n\r\n\r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n      setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel informational portal\"\r\n                />\r\n                <title>Marvel informational portal</title>\r\n                <link rel=\"icon\" href=\"favicons/favicon.ico\" />\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img src={decoration} alt=\"vision\" className=\"bg-decoration\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=f941887dfd675080e7257136180a5650';\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getAllCharacters = async(offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async(offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description for this comics',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not avaliable'\r\n        }\r\n    }\r\n\r\n    return {loading, \r\n            error, \r\n            clearError, \r\n            process, \r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            getAllComics, \r\n            getComics, \r\n            getCharacterByName}\r\n}\r\n\r\n\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    \r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {loading, request, error, clearError, process, setProcess}\r\n\r\n}"],"names":["style","display","justifyContent","marginTop","color","fontWeight","fontSize","width","height","objectFit","margin","src","img","alt","className","View","char","name","description","thumbnail","homepage","wiki","comics","imgStyle","href","length","map","item","i","slice","props","useState","setChar","useMarvelService","clearError","loading","error","getCharacter","process","setProcess","useEffect","updateChar","charId","then","onCharLoaded","Spinner","ErrorMessage","Error","setContent","timerId","setInterval","clearInterval","id","Math","floor","random","errorMessage","spinner","content","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","classList","remove","add","focus","items","arr","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","Helmet","rel","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getComics","_transformComics","getAllComics","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}